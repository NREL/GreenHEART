import numpy as np
import ProFAST
import numpy_financial as npf


def adjust_dollar_year(init_cost, init_dollar_year, adj_cost_year, costing_general_inflation):
    """Adjust cost based on inflation.

    Args:
        init_cost (dict, float, int, list, np.ndarrray): cost of item ($)
        init_dollar_year (int): dollar-year of init_cost
        adj_cost_year (int): dollar-year to adjust cost to
        costing_general_inflation (float): inflation rate (%)

    Returns:
        same type as init_cost: cost in dollar-year of adj_cost_year
    """
    periods = adj_cost_year - init_dollar_year
    if isinstance(init_cost, (float, int)):
        adj_cost = -npf.fv(costing_general_inflation, periods, 0.0, init_cost)
    elif isinstance(init_cost, dict):
        adj_cost = {}
        for key, val in init_cost.items():
            new_val = -npf.fv(costing_general_inflation, periods, 0.0, val)
            adj_cost.update({key: new_val})
    elif isinstance(init_cost, (list, np.ndarray)):
        adj_cost = np.zeros(len(init_cost))
        for i in range(len(init_cost)):
            adj_cost[i] = -npf.fv(costing_general_inflation, periods, 0.0, init_cost[i])
        if isinstance(init_cost, list):
            adj_cost = list(adj_cost)

    return adj_cost


def create_and_populate_profast(pf_config):
    """Create ProFAST object and populate it with inputs.

    Args:
        pf_config (dict): populated dictionary of ProFAST inputs.

    Returns:
        ProFAST object: profast object initialized with data from pf_config
    """
    pf = ProFAST.ProFAST()
    config_keys = list(pf_config.keys())
    if "params" in config_keys:
        params = pf_config["params"]
        params["general inflation rate"]
        for i in params:
            pf.set_params(i, params[i])

    if "feedstocks" in config_keys:
        variables = pf_config["feedstocks"]
        for i in variables:
            pf.add_feedstock(
                i,
                variables[i]["usage"],
                variables[i]["unit"],
                variables[i]["cost"],
                variables[i]["escalation"],
            )

    if "capital_items" in config_keys:
        variables = pf_config["capital_items"]
        for i in variables:
            pf.add_capital_item(
                i,
                variables[i]["cost"],
                variables[i]["depr_type"],
                variables[i]["depr_period"],
                variables[i]["refurb"],
            )

    if "fixed_costs" in config_keys:
        variables = pf_config["fixed_costs"]
        for i in variables:
            pf.add_fixed_cost(
                i,
                variables[i]["usage"],
                variables[i]["unit"],
                variables[i]["cost"],
                variables[i]["escalation"],
            )

    if "coproducts" in config_keys:
        variables = pf_config["coproducts"]
        for i in variables:
            pf.add_coproduct(
                i,
                variables[i]["usage"],
                variables[i]["unit"],
                variables[i]["cost"],
                variables[i]["escalation"],
            )

    if "incentives" in config_keys:
        variables = pf_config["incentives"]
        for i in variables:
            pf.add_incentive(
                i,
                variables[i]["value"],
                variables[i]["decay"],
                variables[i]["sunset_years"],
                variables[i]["tax_credit"],
            )
    return pf


def run_profast(pf):
    """Simulate financials with ProFAST

    Args:
        pf (ProFAST object): populated ProFAST object

    Returns:
        sol (dict): solved price generated by ProFAST
        summary (dict): summary vals generated by ProFAST
        price_breakdown (pd.DataFrame): price breakdown generated by ProFAST
    """
    sol = pf.solve_price()
    summary = pf.get_summary_vals()
    price_breakdown = pf.get_cost_breakdown()
    return sol, summary, price_breakdown


def make_price_breakdown(price_breakdown, pf_config):
    """Make a custom price breakdown of primary cost items in $/unit of commodity.

    Args:
        price_breakdown (pd.DataFrame): price breakdown generated by ProFAST
        pf_config (dict): dictionary of ProFAST inputs.
            can be used to recreate replica of ProFAST simulation.

    Returns:
        full_price_breakdown (dict): dictionary of each item's contribution to overall LCO
        lco_check (float): if ``lcoh_check==sol['price']``
            then the results of ``full_price_breakdown`` are accurate
    """
    price_breakdown_feedstocks = {}
    price_breakdown_capex = {}
    price_breakdown_fixed_cost = {}
    full_price_breakdown = {}
    lco_str = "LCO{}".format(pf_config["params"]["commodity"]["name"][0])
    lco_units = "$/{}".format(pf_config["params"]["commodity"]["unit"])
    config_keys = list(pf_config.keys())
    if "capital_items" in config_keys:
        capital_items = pf_config["capital_items"]
        total_price_capex = 0
        capex_fraction = {}
        for item in capital_items:
            total_price_capex += price_breakdown.loc[
                price_breakdown["Name"] == item, "NPV"
            ].tolist()[0]
        for item in capital_items:
            capex_fraction[item] = (
                price_breakdown.loc[price_breakdown["Name"] == item, "NPV"].tolist()[0]
                / total_price_capex
            )
    cap_expense = (
        price_breakdown.loc[price_breakdown["Name"] == "Repayment of debt", "NPV"].tolist()[0]
        + price_breakdown.loc[price_breakdown["Name"] == "Interest expense", "NPV"].tolist()[0]
        + price_breakdown.loc[price_breakdown["Name"] == "Dividends paid", "NPV"].tolist()[0]
        - price_breakdown.loc[price_breakdown["Name"] == "Inflow of debt", "NPV"].tolist()[0]
        - price_breakdown.loc[price_breakdown["Name"] == "Inflow of equity", "NPV"].tolist()[0]
        - price_breakdown.loc[
            price_breakdown["Name"] == "One time capital incentive", "NPV"
        ].tolist()[0]
    )
    remaining_financial = (
        price_breakdown.loc[price_breakdown["Name"] == "Non-depreciable assets", "NPV"].tolist()[0]
        + price_breakdown.loc[price_breakdown["Name"] == "Cash on hand reserve", "NPV"].tolist()[0]
        + price_breakdown.loc[price_breakdown["Name"] == "Property insurance", "NPV"].tolist()[0]
        - price_breakdown.loc[
            price_breakdown["Name"] == "Sale of non-depreciable assets", "NPV"
        ].tolist()[0]
        - price_breakdown.loc[price_breakdown["Name"] == "Cash on hand recovery", "NPV"].tolist()[0]
    )

    if "capital_items" in config_keys:
        capital_items = pf_config["capital_items"]
        for item in capital_items:
            key_name = f"{lco_str}: {item} ({lco_units})"
            price_breakdown_capex[key_name] = (
                price_breakdown.loc[price_breakdown["Name"] == item, "NPV"].tolist()[0]
                + cap_expense * capex_fraction[item]
            )
        full_price_breakdown.update(price_breakdown_capex)

    if "fixed_costs" in config_keys:
        fixed_items = pf_config["fixed_costs"]
        for item in fixed_items:
            key_name = f"{lco_str}: {item} ({lco_units})"
            price_breakdown_fixed_cost[key_name] = price_breakdown.loc[
                price_breakdown["Name"] == item, "NPV"
            ].tolist()[0]
        full_price_breakdown.update(price_breakdown_fixed_cost)

    if "feedstocks" in config_keys:
        feedstock_items = pf_config["feedstocks"]
        for item in feedstock_items:
            key_name = f"{lco_str}: {item} ({lco_units})"
            price_breakdown_feedstocks[key_name] = price_breakdown.loc[
                price_breakdown["Name"] == item, "NPV"
            ].tolist()[0]
        full_price_breakdown.update(price_breakdown_feedstocks)

    price_breakdown_taxes = (
        price_breakdown.loc[price_breakdown["Name"] == "Income taxes payable", "NPV"].tolist()[0]
        - price_breakdown.loc[price_breakdown["Name"] == "Monetized tax losses", "NPV"].tolist()[0]
    )

    if pf_config["params"]["general inflation rate"] > 0:
        price_breakdown_taxes = (
            price_breakdown_taxes
            + price_breakdown.loc[
                price_breakdown["Name"] == "Capital gains taxes payable", "NPV"
            ].tolist()[0]
        )

    full_price_breakdown[f"{lco_str}: Taxes ({lco_units})"] = price_breakdown_taxes
    full_price_breakdown[f"{lco_str}: Finances ({lco_units})"] = remaining_financial
    lco_check = sum(list(full_price_breakdown.values()))
    full_price_breakdown[f"{lco_str}: Total ({lco_units})"] = lco_check

    return full_price_breakdown, lco_check


def create_years_of_operation(plant_life_years, analysis_start_year, installation_period_months):
    operation_start_year = analysis_start_year + (installation_period_months / 12)
    years_of_operation = np.arange(
        int(operation_start_year), int(operation_start_year + plant_life_years), 1
    )
    year_keys = [f"{y}" for y in years_of_operation]
    return year_keys
